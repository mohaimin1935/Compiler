Line# 1: Token <INT> Lexeme int found
type_specifier : INT 
Line# 1: Token <ID> Lexeme w found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 10 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 2: Token <INT> Lexeme int found
type_specifier : INT 
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 3: Token <INT> Lexeme int found
type_specifier : INT 
Line# 3: Token <ID> Lexeme i found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 3: Token <ID> Lexeme x found
Line# 3: Token <LSQUARE> Lexeme [ found
Line# 3: Token <CONST_INT> Lexeme 10 found
Line# 3: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 3: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 4: Token <ID> Lexeme w found
Line# 4: Token <LSQUARE> Lexeme [ found
Line# 4: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 4: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 4: Token <ASSIGNOP> Lexeme = found
Line# 4: Token <ADDOP> Lexeme - found
Line# 4: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term : unary_expression 
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 5: Token <ID> Lexeme x found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 5: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 5: Token <ASSIGNOP> Lexeme = found
Line# 5: Token <ID> Lexeme w found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 5: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 5: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <LSQUARE> Lexeme [ found
Line# 6: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 6: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 6: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 7: Token <PRINTLN> Lexeme println found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme i found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 2: Token <SINGLE LINE COMMENT> Lexeme // -2 found
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <LSQUARE> Lexeme [ found
Line# 8: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 8: Token <ASSIGNOP> Lexeme = found
Line# 8: Token <ID> Lexeme w found
Line# 8: Token <LSQUARE> Lexeme [ found
Line# 8: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 8: Token <INCOP> Lexeme ++ found
factor : variable INCOP 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 9: Token <ID> Lexeme i found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 9: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 9: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 10: Token <PRINTLN> Lexeme println found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <RPAREN> Lexeme ) found
Line# 10: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 2: Token <SINGLE LINE COMMENT> Lexeme // -1 found
Line# 11: Token <ID> Lexeme i found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 11: Token <ID> Lexeme w found
Line# 11: Token <LSQUARE> Lexeme [ found
Line# 11: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 11: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 11: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 12: Token <PRINTLN> Lexeme println found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 2: Token <SINGLE LINE COMMENT> Lexeme // -1 found
Line# 14: Token <ID> Lexeme i found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 14: Token <ID> Lexeme i found
Line# 14: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 14: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 15: Token <ID> Lexeme i found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 15: Token <ID> Lexeme i found
Line# 15: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 15: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <MULOP> Lexeme * found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
Line# 16: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : term MULOP unary_expression 
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 17: Token <PRINTLN> Lexeme println found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <RPAREN> Lexeme ) found
Line# 17: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 2: Token <SINGLE LINE COMMENT> Lexeme // -1 found
Line# 19: Token <IF> Lexeme if found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <ID> Lexeme i found
Line# 19: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 19: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <LOGICOP> Lexeme && found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
Line# 19: Token <ID> Lexeme i found
Line# 19: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 19: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression : simple_expression 
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <ID> Lexeme i found
Line# 19: Token <RELOP> Lexeme < found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 19: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <LOGICOP> Lexeme && found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
Line# 19: Token <ID> Lexeme i found
Line# 19: Token <RELOP> Lexeme > found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 19: Token <ADDOP> Lexeme - found
Line# 19: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term : unary_expression 
Line# 19: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 19: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression LOGICOP rel_expression 
expression : logic_expression 
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 20: Token <CONST_INT> Lexeme 100 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
Line# 21: Token <ELSE> Lexeme else found
Line# 22: Token <ID> Lexeme i found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 22: Token <CONST_INT> Lexeme 200 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statements statement 
Line# 23: Token <PRINTLN> Lexeme println found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <RPAREN> Lexeme ) found
Line# 23: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 2: Token <SINGLE LINE COMMENT> Lexeme // 100 found
Line# 25: Token <RETURN> Lexeme return found
Line# 25: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 26: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	13--> <i, ID> 
	28--> <x, ARRAY, ID> 
	ScopeTable# 1
	26--> <main, FUNCTION, INT> 
	27--> <w, ARRAY, ID> 
func_definition : type_specifier FUNCTION LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
Total Lines: 27
